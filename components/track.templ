package components

import "strconv"
import "github.com/kilianmandscharo/papierraser/utils"
import "fmt"
import "github.com/kilianmandscharo/papierraser/game"

templ Track(race *game.Race, target game.Player) {
	<div class="track">
		@Connections(race.GetPlayersSorted(), false)
		if !race.StartingPositionsSet() {
			<div>{ fmt.Sprintf("Spieler '%s', w√§hle deine Anfangsposition", race.PickPlayerForStartingPosition().Name) }</div>
		}
		<svg viewBox="0 0 100 100">
			@Grid(race.Track)
			@Line(race.Track.Finish[0], race.Track.Finish[1], "green")
			@Path(race.Track.Inner, "black")
			@Path(race.Track.Outer, "black")
			if !race.StartingPositionsSet() {
				@StartingPositionOptions(race, target)
			} else {
        @Players(race, race.Turn, target)
      }
		</svg>
	</div>
}

templ StartingPositionOptions(race *game.Race, target game.Player) {
	for option, selectable := range race.GetStartingPositionOptions() {
		<circle
			id={ fmt.Sprintf("option-%d,%d", option.X, option.Y) }
			if selectable {
				fill="blue"
			} else {
				fill="red"
			}
      if selectable && target.Id==race.PickPlayerForStartingPosition().Id {
        class="starting-position-option"
      }
			cx={ strconv.Itoa(option.X * 5) }
			cy={ strconv.Itoa(option.Y * 5) }
			r="2"
		></circle>
	}
}

templ Players(race *game.Race, turn int, target game.Player) {
  for _, player := range race.GetPlayersSorted() {
    @Player(player.Path[len(player.Path)-1], "orange")
    if player.Id == turn && player.Id == target.Id {
      @PlayerOptions(race.GetPlayerOptions(player.Id))
    }
  }
}

templ Player(position game.Point, color string) {
	<circle fill={ color } cx={ strconv.Itoa(position.X * 5) } cy={ strconv.Itoa(position.Y * 5) } r="2"></circle>
}

templ PlayerOptions(options []game.Point) {
	for _, option := range options {
		<circle
			id={ fmt.Sprintf("option-%d,%d", option.X, option.Y) }
			class="player-option"
			fill="purple"
			cx={ strconv.Itoa(option.X * 5) }
			cy={ strconv.Itoa(option.Y * 5) }
			r="2"
		></circle>
	}
}

templ Grid(track game.Track) {
	for x := range track.Width {
		<line { utils.GetVerticalLineAttrs(x, track.Height)... } stroke="lightgray"></line>
	}
	for y := range track.Height {
		<line { utils.GetHorizontalLineAttrs(y, track.Width)... } stroke="lightgray"></line>
	}
}

templ Line(start, end game.Point, strokeColor string) {
	<line
		x1={ strconv.Itoa(start.X * 5) }
		y1={ strconv.Itoa(start.Y * 5) }
		x2={ strconv.Itoa(end.X * 5) }
		y2={ strconv.Itoa(end.Y * 5) }
		stroke="green"
	></line>
}

templ Path(path game.Path, strokeColor string) {
	<polygon points={ utils.GetPathString(path) } fill="none" stroke={ strokeColor }></polygon>
}
